{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:constructs/aws-codecommit/secret-gen.lambda"
        },
        {
          "spawn": "bundle:installer/ddb-stream/add-tenant.lambda"
        },
        {
          "spawn": "bundle:pool/eks/find-custer.lambda"
        }
      ]
    },
    "bundle:constructs/aws-codecommit/secret-gen.lambda": {
      "name": "bundle:constructs/aws-codecommit/secret-gen.lambda",
      "description": "Create a JavaScript bundle from src/constructs/aws-codecommit/secret-gen.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/constructs/aws-codecommit/secret-gen.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/constructs/aws-codecommit/secret-gen.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap"
        }
      ]
    },
    "bundle:constructs/aws-codecommit/secret-gen.lambda:watch": {
      "name": "bundle:constructs/aws-codecommit/secret-gen.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/constructs/aws-codecommit/secret-gen.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/constructs/aws-codecommit/secret-gen.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/constructs/aws-codecommit/secret-gen.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap --watch"
        }
      ]
    },
    "bundle:installer/ddb-stream/add-tenant.lambda": {
      "name": "bundle:installer/ddb-stream/add-tenant.lambda",
      "description": "Create a JavaScript bundle from src/installer/ddb-stream/add-tenant.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/installer/ddb-stream/add-tenant.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/installer/ddb-stream/add-tenant.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap"
        }
      ]
    },
    "bundle:installer/ddb-stream/add-tenant.lambda:watch": {
      "name": "bundle:installer/ddb-stream/add-tenant.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/installer/ddb-stream/add-tenant.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/installer/ddb-stream/add-tenant.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/installer/ddb-stream/add-tenant.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap --watch"
        }
      ]
    },
    "bundle:pool/eks/find-custer.lambda": {
      "name": "bundle:pool/eks/find-custer.lambda",
      "description": "Create a JavaScript bundle from src/pool/eks/find-custer.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/pool/eks/find-custer.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/pool/eks/find-custer.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap"
        }
      ]
    },
    "bundle:pool/eks/find-custer.lambda:watch": {
      "name": "bundle:pool/eks/find-custer.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/pool/eks/find-custer.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/pool/eks/find-custer.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/pool/eks/find-custer.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:aws-sdk --sourcemap --watch"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "cdk deploy",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy",
          "receiveArgs": true
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --immutable"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --coverageProvider=v8 --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
