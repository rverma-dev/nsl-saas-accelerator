// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GitopsSecret Snapshot test 1`] = `
{
  Parameters: {
    BootstrapVersion: {
      Default: /cdk-bootstrap/hnb659fds/version,
      Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip],
      Type: AWS::SSM::Parameter::Value<String>,
    },
  },
  Resources: {
    codeCommitSecretCAEFD0AD: {
      DependsOn: [
        codeCommitSecretServiceRoleA5878BEB,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: ZIP,
        },
        Description: src/constructs/aws-codecommit/secret-gen.lambda.ts,
        Environment: {
          Variables: {
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1,
          },
        },
        Handler: index.handler,
        Role: {
          Fn::GetAtt: [
            codeCommitSecretServiceRoleA5878BEB,
            Arn,
          ],
        },
        Runtime: nodejs18.x,
      },
      Type: AWS::Lambda::Function,
    },
    codeCommitSecretCreateGitopsSecretLambdaD568B560: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        Description: AWS Accelerator assets access role in workload accounts to bootstrap gitops credentials,
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
        RoleName: AWSLambdaBasicExecutionRole-codeCommitSecret,
      },
      Type: AWS::IAM::Role,
    },
    codeCommitSecretCreateGitopsSecretLambdaDefaultPolicyE6BF4509: {
      Properties: {
        PolicyDocument: {
          Statement: [
            {
              Action: logs:CreateLogGroup,
              Effect: Allow,
              Resource: {
                Fn::Join: [
                  ,
                  [
                    arn:,
                    {
                      Ref: AWS::Partition,
                    },
                    :logs:,
                    {
                      Ref: AWS::Region,
                    },
                    :,
                    {
                      Ref: AWS::AccountId,
                    },
                    :*,
                  ],
                ],
              },
            },
            {
              Action: secretsmanager:*,
              Effect: Allow,
              Resource: {
                Fn::Join: [
                  ,
                  [
                    arn:,
                    {
                      Ref: AWS::Partition,
                    },
                    :secretsmanager:,
                    {
                      Ref: AWS::Region,
                    },
                    :,
                    {
                      Ref: AWS::AccountId,
                    },
                    :secret:demo,
                  ],
                ],
              },
            },
            {
              Action: [
                kms:Decrypt,
                kms:DescribeKey,
              ],
              Effect: Allow,
              Resource: *,
            },
            {
              Action: [
                iam:CreateServiceSpecificCredential,
                iam:DeleteServiceSpecificCredential,
                iam:ListServiceSpecificCredentials,
              ],
              Effect: Allow,
              Resource: {
                Fn::Join: [
                  ,
                  [
                    arn:,
                    {
                      Ref: AWS::Partition,
                    },
                    :iam::,
                    {
                      Ref: AWS::AccountId,
                    },
                    :user/XXXX,
                  ],
                ],
              },
            },
          ],
          Version: 2012-10-17,
        },
        PolicyName: codeCommitSecretCreateGitopsSecretLambdaDefaultPolicyE6BF4509,
        Roles: [
          {
            Ref: codeCommitSecretCreateGitopsSecretLambdaD568B560,
          },
        ],
      },
      Type: AWS::IAM::Policy,
    },
    codeCommitSecretCustomGitopsSecretsframeworkonEventC5B2CBCC: {
      DependsOn: [
        codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleDefaultPolicy4C82C9C8,
        codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleEE534113,
      ],
      Properties: {
        Code: {
          S3Bucket: {
            Fn::Sub: cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region},
          },
          S3Key: ZIP,
        },
        Description: AWS CDK resource provider framework - onEvent (Default/codeCommitSecret/Custom::GitopsSecrets),
        Environment: {
          Variables: {
            USER_ON_EVENT_FUNCTION_ARN: {
              Fn::GetAtt: [
                codeCommitSecretCAEFD0AD,
                Arn,
              ],
            },
          },
        },
        Handler: framework.onEvent,
        Role: {
          Fn::GetAtt: [
            codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleEE534113,
            Arn,
          ],
        },
        Runtime: nodejs14.x,
        Timeout: 900,
      },
      Type: AWS::Lambda::Function,
    },
    codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleDefaultPolicy4C82C9C8: {
      Properties: {
        PolicyDocument: {
          Statement: [
            {
              Action: lambda:InvokeFunction,
              Effect: Allow,
              Resource: [
                {
                  Fn::GetAtt: [
                    codeCommitSecretCAEFD0AD,
                    Arn,
                  ],
                },
                {
                  Fn::Join: [
                    ,
                    [
                      {
                        Fn::GetAtt: [
                          codeCommitSecretCAEFD0AD,
                          Arn,
                        ],
                      },
                      :*,
                    ],
                  ],
                },
              ],
            },
          ],
          Version: 2012-10-17,
        },
        PolicyName: codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleDefaultPolicy4C82C9C8,
        Roles: [
          {
            Ref: codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleEE534113,
          },
        ],
      },
      Type: AWS::IAM::Policy,
    },
    codeCommitSecretCustomGitopsSecretsframeworkonEventServiceRoleEE534113: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    codeCommitSecretF2AEED65: {
      DeletionPolicy: Delete,
      Properties: {
        ServiceToken: {
          Fn::GetAtt: [
            codeCommitSecretCustomGitopsSecretsframeworkonEventC5B2CBCC,
            Arn,
          ],
        },
        secretName: demo,
        username: XXXX,
      },
      Type: Custom::CodeCommitCredentials,
      UpdateReplacePolicy: Delete,
    },
    codeCommitSecretServiceRoleA5878BEB: {
      Properties: {
        AssumeRolePolicyDocument: {
          Statement: [
            {
              Action: sts:AssumeRole,
              Effect: Allow,
              Principal: {
                Service: lambda.amazonaws.com,
              },
            },
          ],
          Version: 2012-10-17,
        },
        ManagedPolicyArns: [
          {
            Fn::Join: [
              ,
              [
                arn:,
                {
                  Ref: AWS::Partition,
                },
                :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole,
              ],
            ],
          },
        ],
      },
      Type: AWS::IAM::Role,
    },
    codeCommitSecretcodeCommitSecretLogGroup8D6152AC: {
      DeletionPolicy: Delete,
      Properties: {
        LogGroupName: {
          Fn::Join: [
            ,
            [
              /aws/lambda/,
              {
                Ref: codeCommitSecretCAEFD0AD,
              },
            ],
          ],
        },
        RetentionInDays: 731,
      },
      Type: AWS::Logs::LogGroup,
      UpdateReplacePolicy: Delete,
    },
  },
  Rules: {
    CheckBootstrapVersion: {
      Assertions: [
        {
          Assert: {
            Fn::Not: [
              {
                Fn::Contains: [
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                  ],
                  {
                    Ref: BootstrapVersion,
                  },
                ],
              },
            ],
          },
          AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.,
        },
      ],
    },
  },
}
`;
